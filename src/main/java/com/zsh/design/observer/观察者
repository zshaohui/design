观察者模式（Observer Design Pattern）：在对象之间定义一个一对多的依赖，当一个对象状态改变的时候，所有依赖的对象都会得到通知并自动更新。

①、Subject 被观察者
定义被观察者必须实现的职责， 它必须能够动态地增加、 取消观察者。 它一般是抽象类或者是实现类， 仅仅完成作为被观察者必须实现的职责： 管理观察者并通知观察者。
②、Observer观察者
观察者接收到消息后， 即进行update（更新方法） 操作， 对接收到的信息进行处理。
③、ConcreteSubject具体的被观察者
定义被观察者自己的业务逻辑， 同时定义对哪些事件进行通知。
④、ConcreteObserver具体的观察者
每个观察在接收到消息后的处理反应是不同， 各个观察者有自己的处理逻辑。

6、观察者模式优点
①、观察者和被观察者之间是抽象耦合
不管是增加观察者还是被观察者都非常容易扩展，在系统扩展方面会得心应手。
②、建立一套触发机制
被观察者变化引起观察者自动变化。但是需要注意的是，一个被观察者，多个观察者，Java的消息通知默认是顺序执行的，如果一个观察者卡住，会导致整个流程卡住，这就是同步阻塞。
所以实际开发中没有先后顺序的考虑使用异步，异步非阻塞除了能够实现代码解耦，还能充分利用硬件资源，提高代码的执行效率。
另外还有进程间的观察者模式，通常基于消息队列来实现，用于实现不同进程间的观察者和被观察者之间的交互。


7、观察者模式应用场景
①、关联行为场景。
②、事件多级触发场景。
③、跨系统的消息交换场景， 如消息队列的处理机制。