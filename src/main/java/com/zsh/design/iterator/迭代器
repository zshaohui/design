什么是迭代器模式
迭代器模式提供一种方法顺序访问一个聚合对象中的各个元素，而又不暴露其内部的表示。
迭代器模式把游走的任务放在迭代器上，而不是聚合上。这样简化了聚合的接口和实现，也可以让责任各得其所。

迭代器模式组成结构
迭代器（Iterator）：迭代器定义访问和遍历元素的接口。
具体迭代器（ConcreteIterator）：具体迭代器实现迭代器接口，对该聚合遍历时跟踪当前位置。
聚合（Aggregate）：聚合定义创建相应迭代器对象的接口。
具体聚合（ConcreteAggregate）：具体聚合实现创建相应迭代器的接口，该操作返回 ConcreteIterator 的一个适当的实例。

迭代器模式适用场景
访问一个聚合对象的内容而无需暴露它的内部表示。
支持对聚合对象的多种遍历。
为遍历不同的聚合结构提供一个统一的接口。

优点
它支持以不同的方式遍历一个聚合对象。
迭代器简化了聚合类。
在同一个聚合上可以有多个遍历。
在迭代器模式中，增加新的聚合类和迭代器类都很方便，无须修改原有代码。

缺点
对于比较简单的遍历（像数组或者有序列表），使用迭代器方式遍历较为繁琐。

迭代器允许访问聚合的元素，而不需要暴露它的内部结构。
迭代器将遍历集合的任务封装进一个对象中。
使用迭代器的时候，我们依赖聚合提供遍历。
迭代器提供了一个通用的接口 (可以自定义也可以使用 Java API 内置的)，让我们遍历聚合的项，当我们编码使用聚合的项时，可以考虑使用多态机制。